// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	taskFieldNames          = builder.RawFieldNames(&Task{})
	taskRows                = strings.Join(taskFieldNames, ",")
	taskRowsExpectAutoSet   = strings.Join(stringx.Remove(taskFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	taskRowsWithPlaceHolder = strings.Join(stringx.Remove(taskFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	taskModel interface {
		Insert(ctx context.Context, data *Task) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Task, error)
		FindOneByName(ctx context.Context, name string) (*Task, error)
		Update(ctx context.Context, data *Task) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTaskModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Task struct {
		Id             int64          `db:"id"`
		Name           string         `db:"name"`             // task名称
		Type           string         `db:"type"`             // task类型:1-GET接口;2-Jenkins任务;3-远程脚本
		RemoteId       sql.NullInt64  `db:"remote_id"`        // 远程脚本的机器id
		Script         sql.NullString `db:"script"`           // 远程脚本内容
		JenkinsJobName sql.NullString `db:"jenkins_job_name"` // jenkins流水线名称
		ExecParams     string         `db:"exec_params"`      // 执行参数
		GroupsId       int64          `db:"groups_id"`        // task所属群组id
		UserId         int64          `db:"user_id"`          // task创建者id
	}
)

func newTaskModel(conn sqlx.SqlConn) *defaultTaskModel {
	return &defaultTaskModel{
		conn:  conn,
		table: "`task`",
	}
}

func (m *defaultTaskModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTaskModel) FindOne(ctx context.Context, id int64) (*Task, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", taskRows, m.table)
	var resp Task
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTaskModel) FindOneByName(ctx context.Context, name string) (*Task, error) {
	var resp Task
	query := fmt.Sprintf("select %s from %s where `name` = ? limit 1", taskRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, name)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTaskModel) Insert(ctx context.Context, data *Task) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, taskRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Type, data.RemoteId, data.Script, data.JenkinsJobName, data.ExecParams, data.GroupsId, data.UserId)
	return ret, err
}

func (m *defaultTaskModel) Update(ctx context.Context, newData *Task) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, taskRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Name, newData.Type, newData.RemoteId, newData.Script, newData.JenkinsJobName, newData.ExecParams, newData.GroupsId, newData.UserId, newData.Id)
	return err
}

func (m *defaultTaskModel) tableName() string {
	return m.table
}
