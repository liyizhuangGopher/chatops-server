// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	robotFieldNames          = builder.RawFieldNames(&Robot{})
	robotRows                = strings.Join(robotFieldNames, ",")
	robotRowsExpectAutoSet   = strings.Join(stringx.Remove(robotFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	robotRowsWithPlaceHolder = strings.Join(stringx.Remove(robotFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	robotModel interface {
		Insert(ctx context.Context, data *Robot) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Robot, error)
		Update(ctx context.Context, data *Robot) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRobotModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Robot struct {
		Id        int64  `db:"id"`
		Name      string `db:"name"` // 机器人名称
		AgentId   string `db:"agent_id"`
		Appkey    string `db:"appkey"`
		Appsecret string `db:"appsecret"`
	}
)

func newRobotModel(conn sqlx.SqlConn) *defaultRobotModel {
	return &defaultRobotModel{
		conn:  conn,
		table: "`robot`",
	}
}

func (m *defaultRobotModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRobotModel) FindOne(ctx context.Context, id int64) (*Robot, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", robotRows, m.table)
	var resp Robot
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRobotModel) Insert(ctx context.Context, data *Robot) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, robotRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.AgentId, data.Appkey, data.Appsecret)
	return ret, err
}

func (m *defaultRobotModel) Update(ctx context.Context, data *Robot) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, robotRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.AgentId, data.Appkey, data.Appsecret, data.Id)
	return err
}

func (m *defaultRobotModel) tableName() string {
	return m.table
}
